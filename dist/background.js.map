{"version":3,"file":"background.js","mappings":";;;;;;AAiBA,mGAAmG;AACnG,eAAe;AACf,wBAAwB;AACxB,kDAAkD;AAClD,kFAAkF;AAClF,2GAA2G;AAC3G,MAAM,OAAO,GAAoE;IAC/E,iBAAiB,EAAE;QACjB,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,EAAE;KACf;IACD,UAAU,EAAE;QACV,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,EAAE;KACf;IACD,aAAa,EAAE;QACb,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,EAAE;KACf;CACF,CAAC;AAEF,MAAM,QAAQ,GAAwD;IACpE,iBAAiB,EAAE;QACjB,cAAc,EAAE,KAAK;KACtB;IACD,aAAa,EAAE;QACb,SAAS,EAAE,EAAE;KACd;CACF,CAAC;AAOF,qCAAqC;AACrC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,EAAE;IAE1C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE;QAC7C,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACpB,2DAA2D;YAC3D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE;gBAClD,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QACxD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,EAAE;QAC9C,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrB,2DAA2D;YAC3D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE;gBACpD,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;QAC3C,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAChB,MAAM,KAAK,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE;gBACrC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC;IACH,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sources":["webpack://hyperchill-website-blocker/./src/background.ts"],"sourcesContent":["// Define types for Blocked and Settings\r\n// Interface defined a blueprint for objects\r\ninterface Item {\r\n  value: string,\r\n  date: number\r\n}\r\n\r\ninterface Blocked {\r\n  websites: Item[];\r\n  categories: Item[];\r\n}\r\n\r\ninterface Settings {\r\n  deepWorkToggle?: boolean; // Made optional since not every entry uses it\r\n  timeSpans?: number[][]; // Represents time spans as an array of numbers\r\n}\r\n\r\n// TypeScript declaration defines a const blocked, ensuring it adheres to a specific type structure\r\n// Record<K, T>\r\n// K: keys of the object\r\n// T: Type of the values corresponding to each key\r\n// Record structure works here since each key in blocked object is of type Blocked\r\n// If keys had various object types, type or interface would need to be used for specific key-type mappings\r\nconst blocked: Record<'hyperchill-sync' | 'all-time' | 'custom-time', Blocked> = {\r\n  'hyperchill-sync': {\r\n    websites: [],\r\n    categories: []\r\n  },\r\n  'all-time': {\r\n    websites: [],\r\n    categories: []\r\n  },\r\n  'custom-time': {\r\n    websites: [],\r\n    categories: []\r\n  }\r\n};\r\n\r\nconst settings: Record<'hyperchill-sync' | 'custom-time', Settings> = {\r\n  'hyperchill-sync': {\r\n    deepWorkToggle: false\r\n  },\r\n  'custom-time': {\r\n    timeSpans: []\r\n  }\r\n};\r\n\r\ntype State = {\r\n  jwt: string | null;\r\n  userEmail: string | null;\r\n};\r\n\r\n// Run on extension install or update\r\nchrome.runtime.onInstalled.addListener(() => {\r\n\r\n  chrome.storage.local.get(\"blocked\", (result) => {\r\n    if (!result.blocked) {\r\n      // Settings object does not exist, initialize with defaults\r\n      chrome.storage.local.set({ blocked: blocked }, () => {\r\n        console.log(\"Blocked data initialized:\", blocked);\r\n      });\r\n    } else {\r\n      console.log(\"Blocked object exists:\", result.blocked);\r\n    }\r\n  });\r\n\r\n  chrome.storage.local.get(\"settings\", (result) => {\r\n    if (!result.settings) {\r\n      // Settings object does not exist, initialize with defaults\r\n      chrome.storage.local.set({ settings: settings }, () => {\r\n        console.log(\"Settings initialized:\", settings);\r\n      });\r\n    } else {\r\n      console.log(\"Settings object exists:\", result.settings);\r\n    }\r\n  });\r\n\r\n  chrome.storage.local.get(\"state\", (result) => {\r\n    if (!result.state) {\r\n        const state = { jwt: null, userEmail: null };\r\n        chrome.storage.local.set({ state }, () => {\r\n            console.log(\"State initialized:\", state);\r\n        });\r\n    } else {\r\n        console.log(\"State object exists:\", result.state);\r\n    }\r\n  });\r\n\r\n});"],"names":[],"sourceRoot":""}