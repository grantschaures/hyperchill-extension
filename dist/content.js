(()=>{"use strict";(()=>{let e={};document.getElementById("blocked-grid");const t=document.getElementById("website-input"),o=document.getElementById("block-website-btn"),s=(document.getElementById("category-input"),document.getElementById("block-category-btn"),document.getElementById("invalid-input-container"));const l={blocked:{"hyperchill-sync":{websites:[],categories:[]},"all-time":{websites:[],categories:[]},"custom-time":{websites:[],categories:[]}},settings:{"hyperchill-sync":{deepWorkToggle:!1},"custom-time":{timeSpans:[]}}};document.addEventListener("DOMContentLoaded",(()=>{chrome.storage.local.get(["blocked","settings"],(t=>{l.blocked=t.blocked||{},l.settings=t.settings||{},e={"hyperchill-sync-websites-module":l.blocked["hyperchill-sync"].websites,"hyperchill-sync-categories-module":l.blocked["hyperchill-sync"].categories,"all-time-websites-module":l.blocked["all-time"].websites,"all-time-categories-module":l.blocked["all-time"].categories,"custom-time-websites-module":l.blocked["custom-time"].websites,"custom-time-categories-module":l.blocked["custom-time"].categories}})),o.addEventListener("click",(e=>{var o;o=t.value,/^(https?:\/\/)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$/.test(o)?(console.log("valid domain"),"1"===s.style.opacity&&(s.style.opacity="0"),l.blocked["hyperchill-sync"].websites.push({value:"msnbc.com",date:Date.now()}),chrome.storage.local.set({blocked:l},(()=>{console.log("Blocked List Updated:",l)}))):(console.log("invalid domain"),s.style.opacity="1",setTimeout((()=>{s.style.opacity="0"}),3e3))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,